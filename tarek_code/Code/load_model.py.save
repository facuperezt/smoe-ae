import time
import gc 
import os
from os import walk
import tensorflow as tf
from tensorflow import keras
import numpy as np
from keras import layers
from keras.layers import Input, Flatten, Lambda, Dense, Concatenate
from keras.models import Model, load_model
from keras.callbacks import TensorBoard
from skimage.metrics import structural_similarity as compare_ssim
import pickle
import matplotlib.pyplot as plt
from math import sqrt
#from keras import mixed_precision
#Scripts
import functions as fn
import classes as cl

# Set global precision policy
# With this policy, layers use float16 computations and float32 variables
# mixed precision macht nur für gpu sinn, nicht für cpu, da noch langsamer als float32
# mixed_precision.set_global_policy('mixed_float16')

BLOCK_SIZE = int(8)
STEP_VAL = int(8) #from blocked_images_bitstream_windows.py 
NUM_KERNELS = int(4) #int(4*((BLOCK_SIZE)/16)*(BLOCK_SIZE)/16)
BATCH_SIZE = int(16)
EPOCHS = int(30)
BUFFER_SIZE = int(500)
User = "elmoghazi"
step_val = int(8)

#Path
checkpoint_dir = '/home/elmoghazi/Masterarbeit/Data/training_checkpoints/Training18_24_8x8' #Define the checkpoint directory to store the checkpoints after each epoch
test_image_path = '/home/elmoghazi/Masterarbeit/Data/pickles/test/8x8/' # Path test imgs used in Callback function
save_model_path = '/home/elmoghazi/Masterarbeit/Data/training_checkpoints/main'

encoder_input = Input(shape=(BLOCK_SIZE,BLOCK_SIZE,1), name="encoder_input")
model_no_Smoe = fn.standard_8(x=encoder_input, latent_depth=NUM_KERNELS*6)

x=keras.Model(inputs=encoder_input,outputs=model_no_Smoe)
y= cl.SmoeLayer(num_kernels=NUM_KERNELS, block_size=BLOCK_SIZE)(x.output)
encoder_model=keras.Model(inputs=encoder_input,outputs=y)


# Load the checkpoint
checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt_{epoch}")  
encoder_model.load_weights(checkpoint_prefix.format(epoch=24))

g = []
for (_, _, filenames) in walk(test_image_path):
    g.extend(filenames)
    break


for i in range(len(g)):
    filename = g[i]
    data = pickle.load(open(test_image_path + filename, "rb"))
    if STEP_VAL == BLOCK_SIZE:
        img_blocked = data["img_blocked"]
        img_blocked = np.reshape(img_blocked,(-1, img_blocked.shape[2], img_blocked.shape[3]))
        shape_orig = data["shape_orig"]
        shape_orig_blocked = data["shape_orig_blocked"]
        img_orig = np.reshape(img_blocked,(shape_orig_blocked[0], shape_orig_blocked[1], BLOCK_SIZE, BLOCK_SIZE)).transpose(
        0, 2, 1, 3).reshape(shape_orig[0], shape_orig[1])
        features = x.predict(img_blocked)
        img_reconst = fn.Smoe_reconst_overlap(shape_orig=shape_orig, features=features, num_kernels=NUM_KERNELS, block_size=BLOCK_SIZE, img_dim_blocked_x=shape_orig_blocked[0], img_dim_blocked_y=shape_orig_blocked[1], step_val=step_val)
        #img_reconst = fn.Smoe_reconst_og(num_kernels=NUM_KERNELS,block_size=BLOCK_SIZE, center=features).reshape(shape_orig_blocked).transpose(0,2,1,3).reshape(shape_orig)
        psnr_reconst = fn.psnr(img_A=img_orig, img_B=img_reconst)
        ssim_reconst = compare_ssim(img_orig, img_reconst, data_range=1.)

        delta = np.abs(img_orig-img_reconst)

        fig, ((ax1, ax2, ax3)) = plt.subplots(1, 3)
        ax1.tick_params(axis='both', labelsize=5)
        ax1.imshow(img_orig, cmap='gray', vmin=0, vmax=1)
        ax1.set_title('Original')
        ax2.tick_params(axis='both', labelsize=5)
        ax2.imshow(img_reconst, cmap='gray',
                vmin=0, vmax=1)
        ax2.set_title(
        'psnr_reconst: ' + str(round(psnr_reconst, 2)) + ', ssim_reconst: ' + str(
        round(ssim_reconst, 2)))
        ax3.tick_params(axis='both', labelsize=5)
        ax3.imshow(delta, cmap='viridis', vmin=0, vmax=1)
                ax3.set_title('delta')
        plt.savefig('/home/elmoghazi/Masterarbeit/Data/figures/Trainingpics/counter_'+str(i)+".png") # You need to change '/path/to/your/directory/your_image_name.png' to your actual path and file name
        plt.close(fig) # Close the figure to free up memory

         
    
    else:
        img_blocked = data["img_blocked"]
        #shape_orig = data["shape_orig"]
        #shape_orig_blocked = data["shape_orig_blocked"]
        #shape_step_val = data["shape_step_val"]
        #shape_step_val_blocked = data["shape_step_val_blocked"]
        ##overshoot_x = data["overshoot_x"]
        #overshoot_y = data["overshoot_y"]
        #img_orig = fn.average_overlap(img_blocked.reshape(shape_step_val_blocked[0], shape_step_val_blocked[1], BLOCK_SIZE, BLOCK_SIZE), block_size=BLOCK_SIZE, step_val=STEP_VAL, shape_orig=shape_orig, b_averag>
        #features = model_no_Smoe.predict(img_blocked)
        #img_reconst_overlap = fn.Smoe_reconst_overlap(shape_orig=shape_orig, features=features, num_kernels=NUM_KERNELS, block_size=BLOCK_SIZE, img_dim_blocked_x=shape_step_val_blocked[0], img_dim_blocked_y=sha>
        #img_reconst = fn.Smoe_reconst_overlap(shape_orig=shape_orig, features=features, num_kernels=NUM_KERNELS, block_size=BLOCK_SIZE, img_dim_blocked_x=shape_step_val_blocked[0], img_dim_blocked_y=shape_step_>
        #psnr_reconst_overlap = fn.psnr(img_A=img_orig, img_B=img_reconst_overlap)
        #psnr_reconst = fn.psnr(img_A=img_orig, img_B=img_reconst)
        #ssim_reconst_overlap = compare_ssim(img_orig, img_reconst_overlap, data_range=1.)
        #ssim_reconst = compare_ssim(img_orig, img_reconst, data_range=1.)
    
        #fig, ((ax1, ax2, ax3)) = plt.subplots(1, 3)
        #ax1.tick_params(axis='both', labelsize=5)
        #ax1.imshow(img_orig, cmap='gray', vmin=0, vmax=1)
        #ax1.set_title('Original')
        #ax2.tick_params(axis='both', labelsize=5)
        #ax2.imshow(img_reconst, cmap='gray',
        #        vmin=0, vmax=1)
        #ax2.set_title(
        #'psnr_reconst: ' + str(round(psnr_reconst, 2)) + ', ssim_reconst: ' + str(
        #round(ssim_reconst, 2)))

        #ax3.tick_params(axis='both', labelsize=5)
        #ax3.imshow(img_reconst_overlap, cmap='gray', vmin=0, vmax=1)
        #ax3.set_title(
        #                'psnr_smooth: ' + str(round(psnr_reconst_overlap, 2)) + ', ssim_smooth: ' + str(
        #round(ssim_reconst_overlap, 2)))
        #plt.show(block=False)
